{"version":3,"file":"background.js","mappingslIA;AACA;AACA;AACA;AACA","sources":["webpack://reactjs-chrome/./src/background/background.ts","webpack://reactjs-chrome/webpack/before-startup","webpack://reactjs-chrome/webpack/startup","webpack://reactjs-chrome/webpack/after-startup"],"sourcesContent":["var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nchrome.runtime.onMessage.addListener((message, sender, sendResponse) => {\r\n    if (message.type === \"LIKE_VIDEO\") {\r\n        const { videoId, accessToken } = message.payload;\r\n        fetch(\"https://www.googleapis.com/youtube/v3/videos/rate\", {\r\n            method: \"POST\",\r\n            headers: {\r\n                Authorization: `Bearer ${accessToken}`,\r\n                \"Content-Type\": \"application/json\",\r\n            },\r\n            body: JSON.stringify({\r\n                id: videoId,\r\n                rating: \"like\",\r\n            }),\r\n        })\r\n            .then((response) => {\r\n            return true;\r\n        })\r\n            .then(() => {\r\n            sendResponse({ success: true, videoId });\r\n        })\r\n            .catch((error) => {\r\n            console.error(\"Error in liking the video:\", error);\r\n            sendResponse({ success: false, error: error.message });\r\n        });\r\n        return true;\r\n    }\r\n    if (message.type === \"COMMENT_VIDEO\") {\r\n        const { videoId, commentText, accessToken } = message.payload;\r\n        const url = \"https://www.googleapis.com/youtube/v3/commentThreads?part=snippet\";\r\n        const body = {\r\n            snippet: {\r\n                topLevelComment: {\r\n                    snippet: {\r\n                        textOriginal: commentText,\r\n                    },\r\n                },\r\n                videoId,\r\n            },\r\n        };\r\n        fetch(url, {\r\n            method: \"POST\",\r\n            headers: {\r\n                Authorization: `Bearer ${accessToken}`,\r\n                \"Content-Type\": \"application/json\",\r\n            },\r\n            body: JSON.stringify(body),\r\n        })\r\n            .then((response) => {\r\n            if (!response.ok) {\r\n                throw new Error(`HTTP error! Status: ${response.status}`);\r\n            }\r\n            return response.json();\r\n        })\r\n            .then((data) => {\r\n            sendResponse({ success: true, data });\r\n        })\r\n            .catch((error) => {\r\n            console.error(\"Error posting comment:\", error);\r\n            sendResponse({ success: false, error: error.message });\r\n        });\r\n        return true;\r\n    }\r\n    // channel\r\n    if (message.type === \"FETCH_CHANNEL_ID_AND_SUBSCRIBE\") {\r\n        const { handle, accessToken } = message.payload;\r\n        fetchChannelIdAndSubscribe(handle, accessToken)\r\n            .then((data) => {\r\n            sendResponse({ success: true, data });\r\n        })\r\n            .catch((error) => {\r\n            sendResponse({ success: false, error: error.message });\r\n        });\r\n        return true;\r\n    }\r\n});\r\nfunction fetchChannelIdAndSubscribe(handle, accessToken) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        const apiKey = \"AIzaSyBjUc6_XRFUCZqQpxzUyC26rnznsJQYTfo\";\r\n        const fetchChannelIdResponse = yield fetchChannelId(handle, apiKey);\r\n        if (!fetchChannelIdResponse) {\r\n            throw new Error(`Channel ID not found for handle: ${handle}`);\r\n        }\r\n        return yield subscribeToChannel(fetchChannelIdResponse, apiKey, accessToken);\r\n    });\r\n}\r\nfunction fetchChannelId(handle, apiKey) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        const apiUrl = `https://www.googleapis.com/youtube/v3/channels?part=id&forHandle=${handle}&key=${apiKey}`;\r\n        const response = yield fetch(apiUrl);\r\n        const data = yield response.json();\r\n        if (data.items && data.items.length > 0) {\r\n            return data.items[0].id;\r\n        }\r\n        else {\r\n            throw new Error(`No channel found for handle: ${handle}`);\r\n        }\r\n    });\r\n}\r\nfunction subscribeToChannel(channelId, apiKey, accessToken) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        const apiUrl = \"https://www.googleapis.com/youtube/v3/subscriptions?part=snippet\";\r\n        const response = yield fetch(apiUrl, {\r\n            method: \"POST\",\r\n            headers: {\r\n                Authorization: `Bearer ${accessToken}`,\r\n                \"Content-Type\": \"application/json\",\r\n            },\r\n            body: JSON.stringify({\r\n                snippet: {\r\n                    resourceId: {\r\n                        channelId: channelId,\r\n                    },\r\n                },\r\n            }),\r\n        });\r\n        if (!response.ok) {\r\n            const errorData = yield response.json();\r\n            throw new Error(`Subscription API failed: ${errorData.error.message}`);\r\n        }\r\n        return yield response.json();\r\n    });\r\n}\r\n","","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = {};\n__webpack_modules__[\"./src/background/background.ts\"]();\n",""],"names":[],"sourceRoot":""}